#include "serialization"
akka {
	log-dead-letters = 0
	log-dead-letters-during-shutdown = false
	loglevel = INFO
	loggers = ["akka.event.slf4j.Slf4jLogger"]

	extensions = [
		"akka.contrib.pattern.DistributedPubSubExtension",
		"akka.contrib.pattern.ClusterReceptionistExtension"
	]

	debug {
		lifecycle = on
	}

	actor {
	        provider = "akka.cluster.ClusterActorRefProvider"
    		serialize-messages = on
    		serialize-creators = off // on will make rest server fail
    		serializers {
    			event = "com.coinport.coinex.serializers.EventSerializer"
    		}
    		serialization-bindings {
    			"com.coinport.coinex.data.AccountOperationCode" = event
    			"com.coinport.coinex.data.AccountOperationFailed" = event
    			"com.coinport.coinex.data.AccountOperationOk" = event
    			"com.coinport.coinex.data.CashAccount" = event
    			"com.coinport.coinex.data.Currency" = event
    			"com.coinport.coinex.data.DebugDump" = event
    			"com.coinport.coinex.data.DoCancelOrder" = event
    			"com.coinport.coinex.data.DoConfirmCashWithdrawalFailed" = event
    			"com.coinport.coinex.data.DoConfirmCashWithdrawalSuccess" = event
    			"com.coinport.coinex.data.DoDepositCash" = event
    			"com.coinport.coinex.data.DoRequestCashWithdrawal" = event
    			"com.coinport.coinex.data.DoSubmitOrder" = event
    			"com.coinport.coinex.data.MarketSide" = event
    			"com.coinport.coinex.data.NewTxPriceSeen" = event
    			"com.coinport.coinex.data.Order" = event
    			"com.coinport.coinex.data.OrderCancelled" = event
    			"com.coinport.coinex.data.OrderSubmissionOk" = event
    			"com.coinport.coinex.data.OrderSubmitted" = event
    			"com.coinport.coinex.data.Price" = event
    			"com.coinport.coinex.data.QueryAccount" = event
    			"com.coinport.coinex.data.QueryAccountResult" = event
    			"com.coinport.coinex.data.QueryMarket" = event
    			"com.coinport.coinex.data.QueryMarketResult" = event
    			"com.coinport.coinex.data.TakeSnapshotNow" = event
    			"com.coinport.coinex.data.Transaction" = event
    			"com.coinport.coinex.data.TransactionsCreated" = event
    			"com.coinport.coinex.data.Transfer" = event
    			"com.coinport.coinex.data.User" = event
    			"com.coinport.coinex.data.UserAccount" = event
    		}
    	}
	
	remote {
		enabled-transports = ["akka.remote.netty.tcp"]
		netty.tcp {
		    hostname = "192.168.0.107"
		    port = 0
		}
	}
	
	cluster {
		roles = ["frontend"]
		auto-down-unreachable-after = 2s
		role {
			//frontend.min-nr-of-members = 1
		}
		seed-nodes = [
			"akka.tcp://coinex@192.168.0.103:25551"
		]
		
	}
}