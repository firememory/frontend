# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="fHln6mo>x`BZKJND34RuT3aT1J7X[4@VZL`Yem?E?]I20ZE`nGWSn^mNmTckR87V"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router 
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point. 
# Furthermore, it's assumed your route file is named properly. 
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=INFO

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Akka configurations
akka {
	log-dead-letters = 0
	log-dead-letters-during-shutdown = false
	loglevel = INFO
	loggers = ["akka.event.slf4j.Slf4jLogger"]

	extensions = [
		"akka.contrib.pattern.DistributedPubSubExtension",
		"akka.contrib.pattern.ClusterReceptionistExtension"
	]

	debug {
		lifecycle = on
	}

	actor {
	        provider = "akka.cluster.ClusterActorRefProvider"
    		serialize-messages = on
    		serialize-creators = off // on will make rest server fail
    		serializers {
    			event = "com.coinport.coinex.serializers.EventSerializer"
    		}
    		serialization-bindings {
    			"com.coinport.coinex.data.AccountOperationCode" = event
    			"com.coinport.coinex.data.AccountOperationFailed" = event
    			"com.coinport.coinex.data.AccountOperationOk" = event
    			"com.coinport.coinex.data.CashAccount" = event
    			"com.coinport.coinex.data.Currency" = event
    			"com.coinport.coinex.data.DebugDump" = event
    			"com.coinport.coinex.data.DoCancelOrder" = event
    			"com.coinport.coinex.data.DoConfirmCashWithdrawalFailed" = event
    			"com.coinport.coinex.data.DoConfirmCashWithdrawalSuccess" = event
    			"com.coinport.coinex.data.DoDepositCash" = event
    			"com.coinport.coinex.data.DoRequestCashWithdrawal" = event
    			"com.coinport.coinex.data.DoSubmitOrder" = event
    			"com.coinport.coinex.data.MarketSide" = event
    			"com.coinport.coinex.data.NewTxPriceSeen" = event
    			"com.coinport.coinex.data.Order" = event
    			"com.coinport.coinex.data.OrderCancelled" = event
    			"com.coinport.coinex.data.OrderSubmissionOk" = event
    			"com.coinport.coinex.data.OrderSubmitted" = event
    			"com.coinport.coinex.data.Price" = event
    			"com.coinport.coinex.data.QueryAccount" = event
    			"com.coinport.coinex.data.QueryAccountResult" = event
    			"com.coinport.coinex.data.QueryMarket" = event
    			"com.coinport.coinex.data.QueryMarketResult" = event
    			"com.coinport.coinex.data.TakeSnapshotNow" = event
    			"com.coinport.coinex.data.Transaction" = event
    			"com.coinport.coinex.data.TransactionsCreated" = event
    			"com.coinport.coinex.data.Transfer" = event
    			"com.coinport.coinex.data.User" = event
    			"com.coinport.coinex.data.UserAccount" = event
    		}
    	}

	remote {
		enabled-transports = ["akka.remote.netty.tcp"]
		netty.tcp {
		    hostname = "192.168.0.107"
		    port = 0
		}
	}

	cluster {
		roles = ["frontend"]
		auto-down-unreachable-after = 2s
		role {
			//frontend.min-nr-of-members = 1
		}
		seed-nodes = [
			"akka.tcp://coinex@192.168.0.103:25551"
		]
	}
}